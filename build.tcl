#*****************************************************************************************
# Vivado (TM) v2017.4 (64-bit)
#
# build.tcl: Tcl script for re-creating project 'Pipelined_CPU'
#
# Generated by Vivado on Thu Nov 07 18:03:06 -0700 2019
# IP Build 2085800 on Fri Dec 15 22:25:07 MST 2017
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (build.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Program_Counter.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/PC_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Instruction_Memory.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/PC_Adder.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/IF_ID.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Register_File.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Control.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Sign_Extension.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Left_Shifter.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_Adder.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Compare.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/ID_EX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Unsigned_Extension.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Stall_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Flush_Control.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_AND.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Stall_Control.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Four_Flag_ALU.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forwarding_Logic.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/ALU_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/EX_MEM.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Data_Memory.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/MEM_WB.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Dmem_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Reg_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/OR_gate.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Mem_MUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Mem_DMUX.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/bd/Pipelined_CPU/hdl/Pipelined_CPU_wrapper.v"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Instruction_Memory.dat"
#    "C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sim_1/new/Pipelined_CPU_TB.v"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Set the reference directory to where the script is
set origin_dir [file dirname [info script]]

# Set the project name
set project_name "Pipelined_CPU"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set project_name $::user_project_name
}

variable script_file
set script_file "build.tcl"

# Help information for this script
proc help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < [llength $::argc]} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set project_name [lindex $::argv $i] }
      "--help"         { help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Create project
create_project Pipelined_CPU $origin_dir/Pipelined_CPU -part xc7a35tcpg236-1 -force

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "ip_cache_permissions" -value "disable" -objects $obj
set_property -name "part" -value "xc7a35tcpg236-1" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Program_Counter.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/PC_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Instruction_Memory.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/PC_Adder.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/IF_ID.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Register_File.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Control.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Sign_Extension.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Left_Shifter.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Branch_Adder.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Compare.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/ID_EX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Unsigned_Extension.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Stall_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Branch_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Flush_Control.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Branch_AND.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Stall_Control.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Four_Flag_ALU.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Forwarding_Logic.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/ALU_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/EX_MEM.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Data_Memory.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/MEM_WB.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Dmem_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Reg_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/OR_gate.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Mem_MUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/new/Mem_DMUX.v"]"\
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sources_1/bd/Pipelined_CPU/hdl/Pipelined_CPU_wrapper.v"]"\
 "[file normalize "$origin_dir/Instruction_Memory.dat"]"\
]
set imported_files [import_files -fileset sources_1 $files]

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "simple-pipelined-processor/Instruction_Memory.dat"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Data Files" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "Pipelined_CPU_wrapper" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Import local files from the original project
set files [list \
 "[file normalize "$origin_dir/Pipelined_CPU.srcs/sim_1/new/Pipelined_CPU_TB.v"]"\
]
set imported_files [import_files -fileset sim_1 $files]

# Set 'sim_1' fileset file properties for remote files
# None

# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "Pipelined_CPU_TB" -objects $obj


# Adding sources referenced in BDs, if not already added
if { [get_files Program_Counter.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Program_Counter.v
}
if { [get_files PC_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/PC_MUX.v
}
if { [get_files Instruction_Memory.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Instruction_Memory.v
}
if { [get_files PC_Adder.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/PC_Adder.v
}
if { [get_files IF_ID.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/IF_ID.v
}
if { [get_files Register_File.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Register_File.v
}
if { [get_files Control.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Control.v
}
if { [get_files Sign_Extension.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Sign_Extension.v
}
if { [get_files Left_Shifter.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Left_Shifter.v
}
if { [get_files Branch_Adder.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_Adder.v
}
if { [get_files Compare.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Compare.v
}
if { [get_files ID_EX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/ID_EX.v
}
if { [get_files Unsigned_Extension.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Unsigned_Extension.v
}
if { [get_files Stall_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Stall_MUX.v
}
if { [get_files Branch_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_MUX.v
}
if { [get_files Flush_Control.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Flush_Control.v
}
if { [get_files Branch_AND.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Branch_AND.v
}
if { [get_files Stall_Control.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Stall_Control.v
}
if { [get_files Forward_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v
}
if { [get_files Forward_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v
}
if { [get_files Four_Flag_ALU.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Four_Flag_ALU.v
}
if { [get_files Forward_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v
}
if { [get_files Forward_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forward_MUX.v
}
if { [get_files Forwarding_Logic.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Forwarding_Logic.v
}
if { [get_files ALU_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/ALU_MUX.v
}
if { [get_files EX_MEM.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/EX_MEM.v
}
if { [get_files Data_Memory.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Data_Memory.v
}
if { [get_files MEM_WB.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/MEM_WB.v
}
if { [get_files Dmem_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Dmem_MUX.v
}
if { [get_files Reg_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Reg_MUX.v
}
if { [get_files Reg_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Reg_MUX.v
}
if { [get_files OR_gate.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/OR_gate.v
}
if { [get_files Mem_MUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Mem_MUX.v
}
if { [get_files Mem_DMUX.v] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Nick/Coding_Bootcamp/simple-pipelined-processor/Pipelined_CPU.srcs/sources_1/new/Mem_DMUX.v
}


# Proc to create BD Pipelined_CPU
proc cr_bd_Pipelined_CPU { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# ALU, ALU_MUX, Branch_AND, Branch_Adder, Branch_MUX, Compare, Control, Data_Memory, Dmem_MUX, EX_MEM, Flush_Control, Forward_MUX, Forward_MUX, Forward_MUX, Forward_MUX, Forwarding_Logic, ID_EX, IF_ID, Instruction_Memory, Left_Shifter, MEM_WB, Mem_DMUX, Mem_MUX, OR_gate, PC_Adder, PC_MUX, Program_Counter, Reg_MUX, Reg_MUX, Register_File, Sign_Extension, Stall_Control, Stall_MUX, Unsigned_Extension



  # CHANGE DESIGN NAME HERE
  set design_name Pipelined_CPU

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlconstant:1.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  ALU\
  ALU_MUX\
  Branch_AND\
  Branch_Adder\
  Branch_MUX\
  Compare\
  Control\
  Data_Memory\
  Dmem_MUX\
  EX_MEM\
  Flush_Control\
  Forward_MUX\
  Forward_MUX\
  Forward_MUX\
  Forward_MUX\
  Forwarding_Logic\
  ID_EX\
  IF_ID\
  Instruction_Memory\
  Left_Shifter\
  MEM_WB\
  Mem_DMUX\
  Mem_MUX\
  OR_gate\
  PC_Adder\
  PC_MUX\
  Program_Counter\
  Reg_MUX\
  Reg_MUX\
  Register_File\
  Sign_Extension\
  Stall_Control\
  Stall_MUX\
  Unsigned_Extension\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set an [ create_bd_port -dir O -from 7 -to 0 an ]
  set clk [ create_bd_port -dir I -type clk clk ]
  set led [ create_bd_port -dir O -from 15 -to 0 led ]
  set rst [ create_bd_port -dir I -type rst rst ]
  set seg [ create_bd_port -dir O -from 6 -to 0 seg ]

  # Create instance: ALU_0, and set properties
  set block_name ALU
  set block_cell_name ALU_0
  if { [catch {set ALU_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ALU_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ALU_MUX_0, and set properties
  set block_name ALU_MUX
  set block_cell_name ALU_MUX_0
  if { [catch {set ALU_MUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ALU_MUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Branch_AND, and set properties
  set block_name Branch_AND
  set block_cell_name Branch_AND
  if { [catch {set Branch_AND [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Branch_AND eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Branch_Adder, and set properties
  set block_name Branch_Adder
  set block_cell_name Branch_Adder
  if { [catch {set Branch_Adder [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Branch_Adder eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Branch_MUX_0, and set properties
  set block_name Branch_MUX
  set block_cell_name Branch_MUX_0
  if { [catch {set Branch_MUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Branch_MUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Compare, and set properties
  set block_name Compare
  set block_cell_name Compare
  if { [catch {set Compare [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Compare eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Constant_2, and set properties
  set Constant_2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 Constant_2 ]
  set_property -dict [ list \
   CONFIG.CONST_VAL {2} \
   CONFIG.CONST_WIDTH {32} \
 ] $Constant_2

  # Create instance: Control, and set properties
  set block_name Control
  set block_cell_name Control
  if { [catch {set Control [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Control eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Data_Memory_0, and set properties
  set block_name Data_Memory
  set block_cell_name Data_Memory_0
  if { [catch {set Data_Memory_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Data_Memory_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
    set_property -dict [ list \
   CONFIG.MEM00_INIT {0x0000000c} \
   CONFIG.MEM01_INIT {0x0000000a} \
   CONFIG.MEM02_INIT {0x00000010} \
   CONFIG.MEM03_INIT {0x00000002} \
   CONFIG.MEM05_INIT {0x00000006} \
   CONFIG.MEM06_INIT {0x00000008} \
   CONFIG.MEM07_INIT {0x0000000A} \
   CONFIG.MEM08_INIT {0x0000000C} \
   CONFIG.MEM09_INIT {0x0000000e} \
   CONFIG.MEM10_INIT {0x00000010} \
   CONFIG.MEM11_INIT {0x00000012} \
   CONFIG.MEM12_INIT {0x00000014} \
   CONFIG.MEM13_INIT {0x00000000} \
   CONFIG.MEM14_INIT {0x00000000} \
   CONFIG.MEM15_INIT {0x00000000} \
   CONFIG.MEM16_INIT {0x00000000} \
   CONFIG.MEM17_INIT {0x00000000} \
   CONFIG.MEM18_INIT {0x00000000} \
   CONFIG.MEM19_INIT {0x00000000} \
   CONFIG.MEM20_INIT {0x00000000} \
   CONFIG.MEM21_INIT {0x00000000} \
   CONFIG.MEM22_INIT {0x00000000} \
   CONFIG.MEM23_INIT {0x00000000} \
   CONFIG.MEM24_INIT {0x00000000} \
   CONFIG.MEM25_INIT {0x00000000} \
   CONFIG.MEM26_INIT {0x00000000} \
   CONFIG.MEM27_INIT {0x00000000} \
   CONFIG.MEM28_INIT {0x00000000} \
   CONFIG.MEM29_INIT {0x00000000} \
 ] $Data_Memory_0

  # Create instance: Dmem_MUX_0, and set properties
  set block_name Dmem_MUX
  set block_cell_name Dmem_MUX_0
  if { [catch {set Dmem_MUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Dmem_MUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: EX_MEM_0, and set properties
  set block_name EX_MEM
  set block_cell_name EX_MEM_0
  if { [catch {set EX_MEM_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $EX_MEM_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Flush_Control, and set properties
  set block_name Flush_Control
  set block_cell_name Flush_Control
  if { [catch {set Flush_Control [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Flush_Control eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Forward_MUX_0, and set properties
  set block_name Forward_MUX
  set block_cell_name Forward_MUX_0
  if { [catch {set Forward_MUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Forward_MUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Forward_MUX_1, and set properties
  set block_name Forward_MUX
  set block_cell_name Forward_MUX_1
  if { [catch {set Forward_MUX_1 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Forward_MUX_1 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Forward_MUX_2, and set properties
  set block_name Forward_MUX
  set block_cell_name Forward_MUX_2
  if { [catch {set Forward_MUX_2 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Forward_MUX_2 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Forward_MUX_3, and set properties
  set block_name Forward_MUX
  set block_cell_name Forward_MUX_3
  if { [catch {set Forward_MUX_3 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Forward_MUX_3 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Forwarding_Logic_0, and set properties
  set block_name Forwarding_Logic
  set block_cell_name Forwarding_Logic_0
  if { [catch {set Forwarding_Logic_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Forwarding_Logic_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: ID_EX_0, and set properties
  set block_name ID_EX
  set block_cell_name ID_EX_0
  if { [catch {set ID_EX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $ID_EX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: IF_ID, and set properties
  set block_name IF_ID
  set block_cell_name IF_ID
  if { [catch {set IF_ID [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $IF_ID eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Instruction_Memory, and set properties
  set block_name Instruction_Memory
  set block_cell_name Instruction_Memory
  if { [catch {set Instruction_Memory [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Instruction_Memory eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Left_Shifter, and set properties
  set block_name Left_Shifter
  set block_cell_name Left_Shifter
  if { [catch {set Left_Shifter [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Left_Shifter eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: MEM_WB_0, and set properties
  set block_name MEM_WB
  set block_cell_name MEM_WB_0
  if { [catch {set MEM_WB_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $MEM_WB_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Mem_DMUX_0, and set properties
  set block_name Mem_DMUX
  set block_cell_name Mem_DMUX_0
  if { [catch {set Mem_DMUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Mem_DMUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Mem_MUX_0, and set properties
  set block_name Mem_MUX
  set block_cell_name Mem_MUX_0
  if { [catch {set Mem_MUX_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Mem_MUX_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: OR_gate, and set properties
  set block_name OR_gate
  set block_cell_name OR_gate
  if { [catch {set OR_gate [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $OR_gate eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: PC_Adder, and set properties
  set block_name PC_Adder
  set block_cell_name PC_Adder
  if { [catch {set PC_Adder [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $PC_Adder eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: PC_MUX, and set properties
  set block_name PC_MUX
  set block_cell_name PC_MUX
  if { [catch {set PC_MUX [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $PC_MUX eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Program_Counter, and set properties
  set block_name Program_Counter
  set block_cell_name Program_Counter
  if { [catch {set Program_Counter [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Program_Counter eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Reg_MUX_A, and set properties
  set block_name Reg_MUX
  set block_cell_name Reg_MUX_A
  if { [catch {set Reg_MUX_A [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Reg_MUX_A eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Reg_MUX_B, and set properties
  set block_name Reg_MUX
  set block_cell_name Reg_MUX_B
  if { [catch {set Reg_MUX_B [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Reg_MUX_B eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Register_File, and set properties
  set block_name Register_File
  set block_cell_name Register_File
  if { [catch {set Register_File [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Register_File eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Sign_Extension, and set properties
  set block_name Sign_Extension
  set block_cell_name Sign_Extension
  if { [catch {set Sign_Extension [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Sign_Extension eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Stall_Control_0, and set properties
  set block_name Stall_Control
  set block_cell_name Stall_Control_0
  if { [catch {set Stall_Control_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Stall_Control_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Stall_MUX, and set properties
  set block_name Stall_MUX
  set block_cell_name Stall_MUX
  if { [catch {set Stall_MUX [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Stall_MUX eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: Unsigned_Extension_0, and set properties
  set block_name Unsigned_Extension
  set block_cell_name Unsigned_Extension_0
  if { [catch {set Unsigned_Extension_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $Unsigned_Extension_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create port connections
  connect_bd_net -net ALU_0_s [get_bd_pins ALU_0/s] [get_bd_pins EX_MEM_0/alu_out]
  connect_bd_net -net ALU_MUX_0_o [get_bd_pins ALU_MUX_0/o] [get_bd_pins Forward_MUX_3/normal]
  connect_bd_net -net Branch_AND_0_branch [get_bd_pins Branch_AND/branch] [get_bd_pins Flush_Control/branch] [get_bd_pins PC_MUX/branch_select]
  connect_bd_net -net Branch_Adder_0_branch_address [get_bd_pins Branch_Adder/branch_address] [get_bd_pins PC_MUX/branch_address]
  connect_bd_net -net Branch_MUX_0_r [get_bd_pins Branch_MUX_0/r] [get_bd_pins Forwarding_Logic_0/IF_ID_r2] [get_bd_pins ID_EX_0/r2_store] [get_bd_pins Register_File/r2]
  connect_bd_net -net Compare_eq [get_bd_pins Branch_AND/compare] [get_bd_pins Compare/eq]
  connect_bd_net -net Constant_2_dout [get_bd_pins Constant_2/dout] [get_bd_pins PC_Adder/constnt]
  connect_bd_net -net Control_add_sub [get_bd_pins Control/add_sub] [get_bd_pins Stall_MUX/add_sub]
  connect_bd_net -net Control_brnch [get_bd_pins Branch_AND/branch_inst] [get_bd_pins Control/brnch] [get_bd_pins OR_gate/a] [get_bd_pins Stall_Control_0/branch]
  connect_bd_net -net Control_dat_mem [get_bd_pins Control/dat_mem] [get_bd_pins Stall_MUX/dm]
  connect_bd_net -net Control_jmp [get_bd_pins Control/jmp] [get_bd_pins Flush_Control/jump] [get_bd_pins PC_MUX/jump_select]
  connect_bd_net -net Control_ld [get_bd_pins Control/ld] [get_bd_pins Stall_MUX/ld]
  connect_bd_net -net Control_reg_lit [get_bd_pins Control/reg_lit] [get_bd_pins Stall_MUX/reg_lit]
  connect_bd_net -net Control_str [get_bd_pins Control/str] [get_bd_pins OR_gate/b] [get_bd_pins Stall_MUX/str]
  connect_bd_net -net Data_Memory_0_M_data_out [get_bd_pins Data_Memory_0/M_data_out] [get_bd_pins MEM_WB_0/dmem_out]
  connect_bd_net -net Data_Memory_0_an [get_bd_ports an] [get_bd_pins Data_Memory_0/an]
  connect_bd_net -net Data_Memory_0_led [get_bd_ports led] [get_bd_pins Data_Memory_0/led]
  connect_bd_net -net Data_Memory_0_seg [get_bd_ports seg] [get_bd_pins Data_Memory_0/seg]
  connect_bd_net -net Dmem_MUX_0_o [get_bd_pins Dmem_MUX_0/o] [get_bd_pins Forward_MUX_0/MEM_WB_mux_out] [get_bd_pins Forward_MUX_1/MEM_WB_mux_out] [get_bd_pins Forward_MUX_2/MEM_WB_mux_out] [get_bd_pins Forward_MUX_3/MEM_WB_mux_out] [get_bd_pins Mem_DMUX_0/WB_odata] [get_bd_pins Mem_MUX_0/wb] [get_bd_pins Reg_MUX_A/reg_data_in] [get_bd_pins Reg_MUX_B/reg_data_in] [get_bd_pins Register_File/dat]
  connect_bd_net -net EX_MEM_0_alu_out [get_bd_pins Data_Memory_0/M_address] [get_bd_pins EX_MEM_0/_alu_out] [get_bd_pins Forward_MUX_0/EX_MEM_rd] [get_bd_pins Forward_MUX_1/EX_MEM_rd] [get_bd_pins Forward_MUX_2/EX_MEM_rd] [get_bd_pins Forward_MUX_3/EX_MEM_rd] [get_bd_pins MEM_WB_0/alu_out] [get_bd_pins Mem_MUX_0/mem]
  connect_bd_net -net EX_MEM_0_dm [get_bd_pins EX_MEM_0/_dm] [get_bd_pins MEM_WB_0/dm] [get_bd_pins Stall_Control_0/EX_MEM_dat_mem]
  connect_bd_net -net EX_MEM_0_dmem_data [get_bd_pins EX_MEM_0/_dmem_data] [get_bd_pins Mem_DMUX_0/MEM_mdata]
  connect_bd_net -net EX_MEM_0_ld [get_bd_pins EX_MEM_0/_ld] [get_bd_pins Forwarding_Logic_0/MEM_load] [get_bd_pins MEM_WB_0/ld]
  connect_bd_net -net EX_MEM_0_r2_store [get_bd_pins EX_MEM_0/_r2_store] [get_bd_pins Forwarding_Logic_0/MEM_r2_store]
  connect_bd_net -net EX_MEM_0_rd [get_bd_pins EX_MEM_0/_rd] [get_bd_pins Forwarding_Logic_0/MEM_rd] [get_bd_pins MEM_WB_0/rd]
  connect_bd_net -net EX_MEM_0_str [get_bd_pins Data_Memory_0/we] [get_bd_pins EX_MEM_0/_str] [get_bd_pins Forwarding_Logic_0/MEM_store]
  connect_bd_net -net Flush_Control_0_flush [get_bd_pins Flush_Control/flush] [get_bd_pins IF_ID/flush]
  connect_bd_net -net Forward_MUX_0_o [get_bd_pins Compare/r1] [get_bd_pins Forward_MUX_0/o]
  connect_bd_net -net Forward_MUX_1_o [get_bd_pins Compare/r2] [get_bd_pins Forward_MUX_1/o]
  connect_bd_net -net Forward_MUX_2_o [get_bd_pins ALU_0/a] [get_bd_pins Forward_MUX_2/o]
  connect_bd_net -net Forward_MUX_3_o [get_bd_pins ALU_0/b] [get_bd_pins Forward_MUX_3/o]
  connect_bd_net -net Forwarding_Logic_0_a [get_bd_pins Forward_MUX_2/s] [get_bd_pins Forwarding_Logic_0/a]
  connect_bd_net -net Forwarding_Logic_0_b [get_bd_pins Forward_MUX_3/s] [get_bd_pins Forwarding_Logic_0/b]
  connect_bd_net -net Forwarding_Logic_0_c [get_bd_pins Forward_MUX_0/s] [get_bd_pins Forwarding_Logic_0/c]
  connect_bd_net -net Forwarding_Logic_0_d [get_bd_pins Forward_MUX_1/s] [get_bd_pins Forwarding_Logic_0/d]
  connect_bd_net -net Forwarding_Logic_0_e [get_bd_pins Forwarding_Logic_0/e] [get_bd_pins Mem_MUX_0/s]
  connect_bd_net -net Forwarding_Logic_0_f [get_bd_pins Forwarding_Logic_0/f] [get_bd_pins Mem_DMUX_0/s]
  connect_bd_net -net Forwarding_Logic_0_rf_a [get_bd_pins Forwarding_Logic_0/rf_a] [get_bd_pins Reg_MUX_A/s]
  connect_bd_net -net Forwarding_Logic_0_rf_b [get_bd_pins Forwarding_Logic_0/rf_b] [get_bd_pins Reg_MUX_B/s]
  connect_bd_net -net ID_EX_0_add_sub [get_bd_pins ALU_0/add] [get_bd_pins ID_EX_0/_add_sub]
  connect_bd_net -net ID_EX_0_dm [get_bd_pins EX_MEM_0/dm] [get_bd_pins ID_EX_0/_dm] [get_bd_pins Stall_Control_0/ID_EX_dat_mem]
  connect_bd_net -net ID_EX_0_ld [get_bd_pins EX_MEM_0/ld] [get_bd_pins ID_EX_0/_ld] [get_bd_pins Stall_Control_0/ID_EX_load]
  connect_bd_net -net ID_EX_0_r1 [get_bd_pins Forwarding_Logic_0/EX_r1] [get_bd_pins ID_EX_0/_r1]
  connect_bd_net -net ID_EX_0_r1_data [get_bd_pins Forward_MUX_2/normal] [get_bd_pins ID_EX_0/_r1_data]
  connect_bd_net -net ID_EX_0_r2 [get_bd_pins Forwarding_Logic_0/EX_r2] [get_bd_pins ID_EX_0/_r2]
  connect_bd_net -net ID_EX_0_r2_data [get_bd_pins ALU_MUX_0/r2] [get_bd_pins ID_EX_0/_r2_data] [get_bd_pins Mem_MUX_0/normal]
  connect_bd_net -net ID_EX_0_r2_store [get_bd_pins EX_MEM_0/r2_store] [get_bd_pins Forwarding_Logic_0/EX_r2_store] [get_bd_pins ID_EX_0/_r2_store]
  connect_bd_net -net ID_EX_0_rd [get_bd_pins EX_MEM_0/rd] [get_bd_pins ID_EX_0/_rd] [get_bd_pins Stall_Control_0/ID_EX_r2]
  connect_bd_net -net ID_EX_0_reg_lit [get_bd_pins ALU_MUX_0/s] [get_bd_pins Forwarding_Logic_0/EX_reg_lit] [get_bd_pins ID_EX_0/_reg_lit]
  connect_bd_net -net ID_EX_0_sign_ex [get_bd_pins ALU_MUX_0/lit] [get_bd_pins ID_EX_0/_sign_ex]
  connect_bd_net -net ID_EX_0_str [get_bd_pins EX_MEM_0/str] [get_bd_pins Forwarding_Logic_0/EX_store] [get_bd_pins ID_EX_0/_str]
  connect_bd_net -net IF_ID_inc_adr [get_bd_pins Branch_Adder/pc_plus_4] [get_bd_pins IF_ID/inc_adr]
  connect_bd_net -net IF_ID_lit [get_bd_pins IF_ID/lit_6bit] [get_bd_pins Sign_Extension/literal_6bit]
  connect_bd_net -net IF_ID_lit_12bit [get_bd_pins IF_ID/lit_12bit] [get_bd_pins Unsigned_Extension_0/literal_12bit]
  connect_bd_net -net IF_ID_opcode [get_bd_pins Control/opcode] [get_bd_pins IF_ID/opcode]
  connect_bd_net -net IF_ID_r1 [get_bd_pins Forwarding_Logic_0/IF_ID_r1] [get_bd_pins ID_EX_0/r1] [get_bd_pins IF_ID/r1] [get_bd_pins Register_File/r1] [get_bd_pins Stall_Control_0/IF_ID_r1]
  connect_bd_net -net IF_ID_r2 [get_bd_pins Branch_MUX_0/r2] [get_bd_pins ID_EX_0/r2] [get_bd_pins IF_ID/r2] [get_bd_pins Stall_Control_0/IF_ID_r2]
  connect_bd_net -net IF_ID_rd [get_bd_pins Branch_MUX_0/rd] [get_bd_pins ID_EX_0/rd] [get_bd_pins IF_ID/rd]
  connect_bd_net -net Instruction_Memory_instruction [get_bd_pins IF_ID/instruction] [get_bd_pins Instruction_Memory/instruction]
  connect_bd_net -net Left_Shifter_o [get_bd_pins Branch_Adder/branch_in] [get_bd_pins Left_Shifter/o]
  connect_bd_net -net MEM_WB_0_alu_out [get_bd_pins Dmem_MUX_0/reg_dat] [get_bd_pins MEM_WB_0/_alu_out]
  connect_bd_net -net MEM_WB_0_dm [get_bd_pins Dmem_MUX_0/s] [get_bd_pins Forwarding_Logic_0/WB_dm] [get_bd_pins MEM_WB_0/_dm]
  connect_bd_net -net MEM_WB_0_dmem_out [get_bd_pins Dmem_MUX_0/dmem_dat] [get_bd_pins MEM_WB_0/_dmem_out]
  connect_bd_net -net MEM_WB_0_ld [get_bd_pins Forwarding_Logic_0/WB_load] [get_bd_pins MEM_WB_0/_ld] [get_bd_pins Register_File/we]
  connect_bd_net -net MEM_WB_0_rd [get_bd_pins Forwarding_Logic_0/WB_rd] [get_bd_pins MEM_WB_0/_rd] [get_bd_pins Register_File/rd]
  connect_bd_net -net Mem_DMUX_0_odata [get_bd_pins Data_Memory_0/M_data_in] [get_bd_pins Mem_DMUX_0/odata]
  connect_bd_net -net Mem_MUX_0_o [get_bd_pins EX_MEM_0/dmem_data] [get_bd_pins Mem_MUX_0/o]
  connect_bd_net -net Net [get_bd_pins IF_ID/inc_address] [get_bd_pins PC_Adder/inc_address] [get_bd_pins PC_MUX/inc_address]
  connect_bd_net -net OR_gate_o [get_bd_pins Branch_MUX_0/branch_inst] [get_bd_pins OR_gate/o]
  connect_bd_net -net PC_MUX_0_next_address [get_bd_pins PC_MUX/next_address] [get_bd_pins Program_Counter/next_address]
  connect_bd_net -net Program_Counter_address [get_bd_pins Instruction_Memory/address] [get_bd_pins PC_Adder/address] [get_bd_pins Program_Counter/address]
  connect_bd_net -net Register_File_r1_data [get_bd_pins Forward_MUX_0/normal] [get_bd_pins ID_EX_0/r1_data] [get_bd_pins Reg_MUX_A/reg_data_out]
  connect_bd_net -net Register_File_r1_data1 [get_bd_pins Reg_MUX_A/reg_file_out] [get_bd_pins Register_File/r1_data]
  connect_bd_net -net Register_File_r2_data [get_bd_pins Forward_MUX_1/normal] [get_bd_pins ID_EX_0/r2_data] [get_bd_pins Reg_MUX_B/reg_data_out]
  connect_bd_net -net Register_File_r2_data1 [get_bd_pins Reg_MUX_B/reg_file_out] [get_bd_pins Register_File/r2_data]
  connect_bd_net -net Sign_Extension_0_literal_32bit [get_bd_pins ID_EX_0/sign_ex] [get_bd_pins Left_Shifter/i] [get_bd_pins Sign_Extension/literal_32bit]
  connect_bd_net -net Stall_Control_0_IF_ID_write [get_bd_pins IF_ID/write] [get_bd_pins Stall_Control_0/IF_ID_write]
  connect_bd_net -net Stall_Control_0_PC_en [get_bd_pins Program_Counter/en] [get_bd_pins Stall_Control_0/PC_en]
  connect_bd_net -net Stall_Control_0_stall_out [get_bd_pins Flush_Control/stall] [get_bd_pins Stall_Control_0/stall_out] [get_bd_pins Stall_MUX/stall]
  connect_bd_net -net Stall_MUX_0_add_sub [get_bd_pins ID_EX_0/add_sub] [get_bd_pins Stall_MUX/_add_sub]
  connect_bd_net -net Stall_MUX_0_dm [get_bd_pins ID_EX_0/dm] [get_bd_pins Stall_MUX/_dm]
  connect_bd_net -net Stall_MUX_0_ld [get_bd_pins ID_EX_0/ld] [get_bd_pins Stall_MUX/_ld]
  connect_bd_net -net Stall_MUX_0_reg_lit [get_bd_pins ID_EX_0/reg_lit] [get_bd_pins Stall_MUX/_reg_lit]
  connect_bd_net -net Stall_MUX_0_str [get_bd_pins ID_EX_0/str] [get_bd_pins Stall_MUX/_str]
  connect_bd_net -net Unsigned_Extension_0_literal_32bit [get_bd_pins PC_MUX/jump_address] [get_bd_pins Unsigned_Extension_0/literal_32bit]
  connect_bd_net -net clk_1 [get_bd_ports clk] [get_bd_pins Data_Memory_0/clk] [get_bd_pins EX_MEM_0/clk] [get_bd_pins ID_EX_0/clk] [get_bd_pins IF_ID/clk] [get_bd_pins MEM_WB_0/clk] [get_bd_pins Program_Counter/clk] [get_bd_pins Register_File/clk]
  connect_bd_net -net rst_1 [get_bd_ports rst] [get_bd_pins Data_Memory_0/rst] [get_bd_pins EX_MEM_0/rst] [get_bd_pins ID_EX_0/rst] [get_bd_pins IF_ID/rst] [get_bd_pins MEM_WB_0/rst] [get_bd_pins Program_Counter/rst] [get_bd_pins Register_File/rst]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_Pipelined_CPU()
cr_bd_Pipelined_CPU ""
set_property GENERATE_SYNTH_CHECKPOINT "0" [get_files Pipelined_CPU.bd ] 

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7a35tcpg236-1 -flow {Vivado Synthesis 2016} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2016" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "part" -value "xc7a35tcpg236-1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7a35tcpg236-1 -flow {Vivado Implementation 2016} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2016" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {

}
set obj [get_runs impl_1]
set_property -name "part" -value "xc7a35tcpg236-1" -objects $obj
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:$project_name"
