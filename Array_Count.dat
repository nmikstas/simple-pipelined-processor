/************************************************************************/
/*  R instruction format:                                               */
/*  op   rd  rs  rt  N/A                                                */
/*  0000_000_000_000_XXX                                                */
/*                                                                      */
/*  I instruction format:                                               */
/*  op    rd  rs  signed_lit                                            */
/*  0000__000_000_000000                                                */
/*                                                                      */
/*  B/S instruction format:                                             */
/*  op    rt  rs  signed_lit                                            */
/*  0000__000_000_000000                                                */
/*                                                                      */
/*  J instruction format:                                               */
/*  op      unsinged_lit                                                */
/*  0000____000000000000                                                */
/*                                                                      */
/*  Opcodes:                                                            */
/*  0000 NOP  N/A                                   (All  zeros)        */
/*  0001 ADD  $rd = $rs + $rt                       (R   format)        */
/*  0010 ADDi $rd = $rs + lit                       (I   format)        */
/*  0011 SUB  $rd = $rs - $rt                       (R   format)        */
/*  0100 SUBi $rd = $rs - lit                       (I   format)        */
/*  0101 LWr  $rd = mem($rs + $rt)                  (R   format)        */
/*  0110 LW   $rd = mem($rs + lit)                  (I   format)        */
/*  0111 SW   mem($rs + lit) = $rt                  (B/S format)        */
/*  1000 JMP  PC = unsigned_lit                     (J   format)        */
/*  1001 BEQ  if $rs == $rt, PC = PC + 2*signed_lit (B/S format)        */
/*                                                                      */
/*  Underscores can be used to separate                                 */
/*  data bits into logical groups.                                      */
/*                                                                      */
/*  C-style comments can be used to make                                */
/*  the code more readable.                                             */
/*                                                                      */
/*  The data radix is base 2(binary).                                   */
/************************************************************************/

//////////////////////////////////////////////////////////////////////////
//  Count the number of occurrences of a value in an array.             //
//                                                                      //
//  Data memory:                                                        //
//  0x00 = Array base address.                                          //
//  0x04 = Array length in elements.                                    //
//  0x08 = Element value to search for and count.                       //
//  0x0C = Start of array.                                              //
//  0x78 = 7 segment display - memory mapped I/O.                       //
//                                                                      //
//  Registers:                                                          //
//  r0 = Zero reference.                                                //
//  r1 = Array base address.                                            //
//  r2 = Array pointer.                                                 //
//  r3 = Element counter.                                               //
//  r4 = Retreived value from memory\comparison results.                //
//  r5 = Value to find.                                                 //
//////////////////////////////////////////////////////////////////////////

//Address 0
0101_001_000_000_000 //LWr  $r1, $r0($r0) <- Get array start index.
//Address 2
0110__010_000_000100 //LW   $r2, 4($r0)   <- Get array length in words.
//Address 4
0001_010_010_010_000 //ADD  $r2, $r2, $r2 <- *2.
//Address 6
0001_010_010_010_000 //ADD  $r2, $r2, $r2 <- *2, Array length in bytes.
//Address 8
0100__010_010_000100 //SUBi $r2, $r2, 4   <- Subtract 4 to find start of last word.
//Address 10
0011_011_011_011_000 //SUB  $r3, $r3, $r3 <- Zero out counter.
//Address 12
0110__101_000_001000 //LW   $r5, 8($r0)   <- Get value to find.

//CountLoop:

//Address 14
0101_100_001_010_000 //LWr  $r4, $r2($r1) <- Get value from array.
//Address 16
0011_100_100_101_000 //SUB  $r4, $r4, $r5 <- Compare with value to find.
//Address 18
1001__100_000_000011 //BEQ  $r4, $r0, 3   <- Branch if match found.
//Address 20
1001__010_000_000100 //BEQ  $r2, $r0, 4   <- Exit if last index reached.
//Address 22
0100__010_010_000100 //SUBi $r2, $r2, 4   <- Decrement to next array index.
//Address 24
1000____000000001110 //JMP  CountLoop     <- More work to do, loop.

//MatchFound:

//Address 26
0010__011_011_000001 //ADDi $r3, $r3, 1   <- Match found. Increment counter.
//Address 28
1000____000000010100 //JMP  Address 20    <- Jump to continue processing.

//LoopFinished:

//Address 30
0010__010_000_011110 //ADDi $r2, $r0, 30  <- Load register with 30.
//Address 32
0001_010_010_010_000 //ADD  $r2, $r2, $r2 <- *2.
//Address 34
0001_010_010_010_000 //ADD  $r2, $r2, $r2 <- *2, Now contains address 120.
//Address 36
0111__011_010_000000 //SW   $r3, 0($r2)   <-Write results to 7 segment display. 

//Spinlock:

//Address 38
1000____000000100110 //JMP  Spinlock      <- Done.
